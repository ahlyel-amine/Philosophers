#ifndef PHILO_H
# define PHILO_H

#include "../lib/libft/include/libft.h"
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <stdbool.h>
#include <sys/time.h>
int	dead;			//? write
typedef struct s_philo
{
	int				philos;
	int				tm_eat;
	int				tm_sleep;
	int				tm_die;
	int				eat_counter;
	long long		time;
	pthread_mutex_t	catch;
}   t_philo;

typedef struct s_philo_single_data	//?	read
{
	int				philo_id;		//?	read
	bool			eating;			//?	read
	long long		time_to_die;	//?	read
	pthread_mutex_t	left;
	pthread_mutex_t	*right;
	pthread_t		thread;
	t_philo			*lp;
}   t_philo_single_data;

enum enum_msg
{
	EAT		= 0b1,
	SLEEP	= 0b10,
	THINK	= 0b100,
	DEAD	= 0b1000,
	FORK	= 0b10000,
};

size_t				ft_strlen(const char *s);
int					ft_atoi(const char *str);
int					ft_isdigit(int c);
void				ft_putendl_fd(char *s, int fd);
int					check_syntax(int ac, char **av);
void				get_data(t_philo *data, int ac, char **av);
t_philo_single_data	*init_data(t_philo data);
void				take_forks(t_philo_single_data *philos, t_philo data);
void				_eat(t_philo_single_data *data);
void				_sleep(t_philo_single_data *data);
void				_think(t_philo_single_data *data);
long long			get_time();
void				sleep_job_time(long long sleep_time);
void				print_msg(t_philo_single_data *data, int msg, long long time);


#endif

#include "../include/philo.h"

static void	*catche(t_philo_single_data *data)
{
	long long	start;
	
	while (0x5ABA)
	{
		pthread_mutex_lock(&data->lp->catch);
		start = get_time();
		if (!dead && start >= data->time_to_die && !data->eating)
		{
			dead = 1;
			printf("%lld philo %d is dead\n", get_time() - data->lp->time, data->philo_id);
			break ;
		}
		else if (dead)
			break ;
		pthread_mutex_unlock(&data->lp->catch);
	}
	pthread_mutex_unlock(&data->lp->catch);
	return ((void *)0);
}

static void	*routine(t_philo_single_data *data)
{
	data->time_to_die = get_time() + data->lp->tm_die;
	if (data->philo_id % 2)
		usleep(100);
	pthread_create(&data->thread, NULL, (void *)catche, data);
	pthread_mutex_lock(&data->lp->catch);
	while (!dead)  
	{
		pthread_mutex_unlock(&data->lp->catch);
		_eat(data);
		_sleep(data);
		_think(data);
		pthread_mutex_lock(&data->lp->catch);
	}
	pthread_mutex_unlock(&data->lp->catch);
	if (pthread_join(data->thread, NULL))
		return ((void *)1);
	return ((void *)0);
}

void	take_forks(t_philo_single_data *philos, t_philo data)
{
	int	i;
	i = 0;
	data.time = get_time();
	while (i < data.philos)
	{
		printf("%d\n", i);
		philos[i].philo_id = i + 1;
		philos[i].lp = &data;
		philos[i].eating = false;
		pthread_create(&(philos[i].thread), NULL, (void *)routine, &(philos[i]));
		i++;
	}
	i = 0;
	while (i < data.philos)
	{	
		pthread_join(philos[i].thread, NULL);
		printf("%d\n", i);
		usleep(1000000);
		i++;
	}
	pthread_mutex_destroy(&data.catch);
	i = 0;
	while (i < data.philos)
		pthread_mutex_destroy(&philos[i++].left);
	free(philos);
}

#include "../include/philo.h"

void	get_data(t_philo *data, int ac, char **av)
{
	dead = false;
	data->philos = ft_atoi(av[1]);
	data->tm_die = ft_atoi(av[2]);
	data->tm_eat = ft_atoi(av[3]);
	data->tm_sleep = ft_atoi(av[4]);
	if (data->philos > 200 || data->tm_die < 60 || data->tm_eat < 60 || data->tm_sleep < 60)
	{
		ft_putendl_fd("invalid arguments", 2);
		exit (1);
	}
	data->eat_counter = -1;
	if (ac == 6)
		data->eat_counter = ft_atoi(av[5]);
	pthread_mutex_init(&data->catch, NULL);
}

t_philo_single_data	*init_data(t_philo data)
{
	int	i;
	t_philo_single_data *mtx;
	mtx = malloc(sizeof(t_philo_single_data) * data.philos);
	i = -1;
	while (++i < data.philos)
		pthread_mutex_init(&mtx[i].left, NULL);
	mtx[0].right = &mtx[data.philos - 1].left;
	i = 0;
	while (++i < data.philos)
		mtx[i].right = &mtx[i - 1].left;
	return (mtx);
}

#include "../include/philo.h"

void	_eat(t_philo_single_data *data)
{
	pthread_mutex_lock(&data->left);
	print_msg(data, (data->philo_id << 8) | FORK, data->lp->time);
	pthread_mutex_lock(data->right);
	print_msg(data, (data->philo_id << 8) | FORK, data->lp->time);
	pthread_mutex_lock(&data->lp->catch);
	if (dead)
		{
	pthread_mutex_unlock(&data->lp->catch);
			return ;
		}
	data->time_to_die = get_time() + data->lp->tm_die;
	data->eating = true;
	pthread_mutex_unlock(&data->lp->catch);
	print_msg(data, (data->philo_id << 8) | EAT, data->lp->time);
	sleep_job_time(data->lp->tm_eat);
	pthread_mutex_unlock(&data->left);
	pthread_mutex_unlock(data->right);
	// }
	pthread_mutex_lock(&data->lp->catch);
	data->eating = false;
	pthread_mutex_unlock(&data->lp->catch);
}

void	_sleep(t_philo_single_data *data)
{
	print_msg(data, (data->philo_id << 8) | SLEEP, data->lp->time);
	sleep_job_time(data->lp->tm_sleep);
}

void	_think(t_philo_single_data *data)
{
	print_msg(data, (data->philo_id << 8) | THINK, data->lp->time);
}

#include "../include/philo.h"

int	ft_atoi(const char *str)
{
	int		sign;
	long	res;

	sign = 1;
	res = 0;
	while (*str == ' ' || (*str >= 9 && *str <= 13))
		str++;
	if (*str == '-' || *str == '+')
		if (*(str++) == '-')
			sign = -1;
	while (*str && ft_isdigit(*str))
		res = (res * 10) + *(str++) - '0';
	return ((int)(res * sign));
}

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

void	ft_putendl_fd(char *s, int fd)
{
	if (!s)
		return ;
	write(fd, s, ft_strlen(s));
	write(fd, "\n", 1);
}

size_t	ft_strlen(const char *s)
{
	const char	*c;

	if (!s)
		return (0);
	c = s;
	while (*c)
		c++;
	return ((c - s));
}

#include "../include/philo.h"

int	str_is_digit(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

int	check_syntax(int ac, char **av)
{
	int	i;

	i = 1;
	while (i < ac)
	{
		if (!str_is_digit(av[i]))
			return (0);
		i++;
	}
	return (1);
}

#include "../include/philo.h"

int main(int ac, char **av)
{
	t_philo	data;

	if ((ac == 5 || ac == 6))
	{
		if (!check_syntax(ac, av))
			return (ft_putendl_fd("invalid arguments", 2), 0);
		get_data(&data, ac, av);
	}
	if (ac == 5)
		take_forks(init_data(data), data);
	else if (ac == 6)
		;
	else
		ft_putendl_fd("invalid arguments", 2);
	return (0);
}

#include "../include/philo.h"

long long	get_time()
{
	struct timeval	tv;
	long long	time_;

	gettimeofday(&tv, NULL);
	time_ = tv.tv_sec * 1000 + tv.tv_usec / 1000;
	return (time_);
}

void	sleep_job_time(long long sleep_time)
{
	// usleep(sleep_time * 1000);
	long long	start = get_time();
	while (get_time() < start + sleep_time)
		usleep(1000);
}

void	print_msg(t_philo_single_data *data, int msg, long long time)
{
	(void)time;
	pthread_mutex_lock(&data->lp->catch);
	if (dead)
	{
		pthread_mutex_unlock(&data->lp->catch);
		return ;
	}
	pthread_mutex_unlock(&data->lp->catch);
	if (msg & EAT)
	// ;
		printf("%lld philo %d is eating\n", get_time() - time, msg >> 8);
	else if (msg & SLEEP)
	// ;
		printf("%lld philo %d is sleeping\n", get_time() - time, msg >> 8);
	else if (msg & THINK)
	// ;
		printf("%lld philo %d is thinking\n", get_time() - time, msg >> 8);
	else if (msg & FORK)
	// ;
		printf("%lld philo %d has taken a fork\n", get_time() - time, msg >> 8);
}
